{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","setStatus","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","event","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","completeTodo","removeTodo","updatedTodo","filteredTodos","setEdit","map","todo","index","isComplete","TodoList","todos","setTodos","status","useMemo","result","filter","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","getLocalTodos","test","newTodos","updateTodos","removeArr","todoId","newValue","prev","item","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7738e52.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm({ setStatus, ...props }) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const statusTodos = (event) => {\n    setStatus(event.target.value)\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className='todo-form'>\n      {props.edit ? (\n        <>\n          <input\n            placeholder='Update your item'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            ref={inputRef}\n            className='todo-input edit'\n          />\n          <button onClick={handleSubmit} className='todo-button edit'>\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n          <input\n            placeholder='Add a todo'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            className='todo-input'\n            ref={inputRef}\n          />\n          <button onClick={handleSubmit} className='todo-button'>\n            Add todo\n          </button>\n          <select\n            onChange={statusTodos}\n            name=\"characters\"\n            className=\"todo-button btn-select\"\n          >\n            <option\n              className=\"option\"\n              value=\"all\"\n            >\n              All\n            </option>\n            <option\n              className=\"option\"\n              value=\"completedTodos\"\n            >\n              Completed\n            </option>\n            <option\n              className=\"option\"\n              value=\"uncompletedTodos\"\n            >\n              Uncompleted\n            </option>\n          </select>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport { FaCheck } from 'react-icons/fa';\n\nconst Todo = ({ completeTodo, removeTodo, updatedTodo, filteredTodos }) => {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n  });\n\n  const submitUpdate = value => {\n    updatedTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: ''\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return filteredTodos.map((todo, index) => (\n    <div\n      className={todo.isComplete\n        ? 'todo-row complete'\n        : 'todo-row'}\n      key={index}\n    >\n      <div key={todo.id}>\n        {todo.text}\n      </div>\n      <div className='icons'>\n        <FaCheck\n          key={todo.id}\n          onClick={() => completeTodo(todo.id)}\n          className='icon-style'\n        />\n        <RiCloseCircleLine\n          onClick={() => removeTodo(todo.id)}\n          className='icon-style'\n        />\n        <TiEdit\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n          className='icon-style'\n        />\n      </div>\n    </div>\n  ));\n};\n\nexport default Todo;","import React, { useState, useEffect, useMemo } from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n\n  const addTodo = (todo) => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    };\n\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n  };\n\n  const updatedTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    };\n\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n  const removeTodo = (id) => {\n    const removeArr = todos.filter(todo => todo.id !== id);\n\n    setTodos(removeArr);\n  };\n\n  const completeTodo = (id) => {\n    let updateTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      \n      return todo;\n    });\n    setTodos(updateTodos);\n  };\n\n  const filteredTodos = useMemo(() => {\n    let result = todos;\n\n    if (status === \"all\") {\n      return result;\n    }\n\n    if (status === \"completedTodos\") {\n      result = result.filter(todo => todo.isComplete === true);\n    }\n\n    if (status === \"uncompletedTodos\") {\n      result = result.filter(todo => todo.isComplete !== true);\n    }\n\n    return result;\n  }, [todos, status]);\n\n  const saveLocalTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  const getLocalTodos = () => {\n    if (localStorage.getItem(\"todos\") === null) {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  };\n\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    saveLocalTodos();\n  });\n\n  return (\n    <div>\n      <h1 className=\"title\">\n        What`s the Plan for Today?\n      </h1>\n      <TodoForm\n        onSubmit={addTodo}\n        setStatus={setStatus}\n      />\n      <Todo\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updatedTodo={updatedTodo}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  )\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}